tosca_definitions_version: tosca_simple_yaml_1_3

# This is by far the most elaborate aspect of TOSCA
# There are many ways to define and assign requirements and relationships

node_types:

  LightBulb:
    # Though requirements are a sequenced list, you cannot specify the same name more than once at the node type
    # (You can do so at the node template)
    requirements:
    # The short notation is used to just specify a target capability type
    - socket: Socket

  Fan:
    requirements:
    # The long notation lets us further specify a target node type
    # And also (optionally) a default relationship type
    - socket:
        capability: SuperSocket
        node: PowerPanel
        relationship: SmartPlug
        # You can also control the number of times the requirement *must* be assigned per node template
        # The implied default is the range of [ 1, 1 ]
        # Note that if you don't specify "occurrences" then a requirement will be automatically assigned
        occurrences: [ 2, UNBOUNDED ]

  PowerPanel:
    properties:
      age:
        type: scalar-unit.time
    capabilities:
      main: Socket
      aux: Socket
      emergency:
        type: SuperSocket
        # The long notation lets us specify "occurrences", which is how many times the capability *must* be required
        # This applies to the resolution phase and doest *not* have a grammatical (parsing) effect
        # (It's thus *very* different from "occurrences" in requirements)
        # The default is [ 0, UNBOUNDED ]
        occurrences: [ 2, 4 ]

capability_types:

  Socket:
    properties:
      standard:
        type: string
      voltage:
        type: float
      frequency:
        type: scalar-unit.frequency

  SuperSocket:
    derived_from: Socket
    properties:
      failsafe:
        type: boolean

relationship_types:

  SmartPlug:
    properties:
      vendor:
        type: string
    attributes:
      ip_address:
        type: string

  SuperSmartPlug:
    derived_from: SmartPlug
    properties:
      failsafe:
        type: boolean

topology_template:

  inputs:
    age:
      type: scalar-unit.time
      default: 5 d

  node_templates:

    # Because the "socket" requirement is not controlled by "occurrences" at the node type
    # It will be automatically assigned to "light1"
    # Because we have 3 matching capabilities, Puccini will arbitrarily pick one
    light1:
      type: LightBulb

    # You can specify a specific node template
    light2:
      type: LightBulb
      requirements:
      - socket: main_panel

    # Or a node type
    light3:
      type: LightBulb
      requirements:
      - socket: PowerPanel

    # With the long notation you can also specify the name of the capability at the target node
    # Which must match the capability type specified at the requirement definition
    # Or be a derived type -- in this case it's a SuperSocket
    light4:
      type: LightBulb
      requirements:
      - socket:
          node: main_panel
          capability: emergency

    # You can specify a capability type, too
    # Again, it must match the capability type specified at the requirement definition
    # Or be a derived type
    light5:
      type: LightBulb
      requirements:
      - socket:
          capability: SuperSocket

    # You can specify the same requirement more than once, which will lead to multiple relationships
    # (However, the number of times you may do so can be limited by "occurrences" at the node type)
    light6:
      type: LightBulb
      requirements:
      - socket:
          capability: SuperSocket
      # An "empty" requirement will use whatever we specified at the node type
      - socket: {}

    # You can use "node_filter" to further require property values at the target node
    light7:
      type: LightBulb
      requirements:
      - socket:
          capability: Socket
          node_filter:
            properties:
              age:
              # Note that special data types are not supported here
              - less_than: 8640000 # 100 d -> seconds

    # You can also put "node_filter" at the node itself, in which case the filter will
    # apply to *all* requirements
    light8:
      type: LightBulb
      node_filter:
        properties:
          age:
          - less_than: 8640000 # 100 d -> seconds
      requirements:
      - socket:
          capability: Socket

    # "node_filter" can also work on capability properties
    light9:
      type: LightBulb
      requirements:
      - socket:
          capability: Socket
          node_filter:
            capabilities:
              emergency:
                properties:
                  frequency:
                  - greater_than: 100 # 100 hz
 
    # You can add a relationship type to the requirement
    # (If you don't, Puccini creates an empty relationship with no properties)
    light10:
      type: LightBulb
      requirements:
      - socket:
          relationship: SmartPlug

    # The long notation lets you assign values to the relationship
    light11:
      type: LightBulb
      requirements:
      - socket:
          relationship:
            type: SmartPlug
            properties:
              vendor: Smart Appliances Industries

    # Yet another option is to use a relationship template instead of a relationship type
    # (A confusing and unnecessary feature)
    light12:
      type: LightBulb
      requirements:
      - socket:
          relationship: smart_plug

    # In this case the node type specifies a relationship type
    fan1:
      type: Fan
      requirements:
      - socket:
          relationship:
            # So we can only use a relationship type/template that matches that type
            # (Or a sub-type)
            type: SuperSmartPlug
            properties:
              vendor: PowerEmperor
              failsafe: false
      # Because the "occurrences" for this requirement is [ 2, 4 ] we must assign it at least twice
      - socket:
          relationship:
            properties:
              vendor: PowerEmperor

    main_panel:
      type: PowerPanel
      properties:
        age: { get_input: age }
      capabilities:
        main:
          properties:
            standard: People's Repbulic of China
            voltage: 220.0
            frequency: 50 hz
        aux:
          properties:
            standard: United States of America
            voltage: 110.0
            frequency: 60 hz
        emergency:
          properties:
            standard: High Frequency
            voltage: 110.0
            frequency: 120 hz
            failsafe: true

  relationship_templates:

    smart_plug:
      type: SmartPlug
      properties:
        vendor: Electric Stuff International
